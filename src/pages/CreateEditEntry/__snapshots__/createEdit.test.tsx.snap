// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Should render entries should render createEditForm  1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CreatEditEntry
    Edit={false}
    addEntryAction={[MockFunction]}
    date="20-2-19"
    diaryBody="Test Diary body"
    diaryTitle="Test Diary Title"
    editEntry={
      Object {
        "entry": Object {
          "date": "12/12/2018",
          "delete": [MockFunction],
          "diaryEntryBody": "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Perspiciatis commodi, hic esse necessitatibus inventore illo debitis error nesciunt officia earum. Optio totam, sapiente ",
          "diaryTitle": "Title 1",
          "entry_id": 1,
        },
      }
    }
    editEntryAction={[MockFunction]}
    getEntryAction={
      [MockFunction] {
        "calls": Array [
          Array [
            "1",
          ],
          Array [
            "1",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": Promise {},
          },
          Object {
            "isThrow": false,
            "value": Promise {},
          },
        ],
      }
    }
    history={
      Object {
        "push": [Function],
      }
    }
    location={
      Object {
        "pathname": "/addEntry",
      }
    }
    match={
      Object {
        "params": Object {
          "entry_id": "1",
        },
      }
    }
    newEntry={Object {}}
    onChange={[MockFunction]}
    onSubmit={[MockFunction]}
    title="Form title"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Header />,
        <div
          className="CreateEntryForm"
        >
          <EntryForm
            Edit={false}
            addEntryAction={[MockFunction]}
            date="20-2-19"
            diaryBody="Test Diary body"
            diaryTitle="Test Diary Title"
            editEntry={
              Object {
                "entry": Object {
                  "date": "12/12/2018",
                  "delete": [MockFunction],
                  "diaryEntryBody": "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Perspiciatis commodi, hic esse necessitatibus inventore illo debitis error nesciunt officia earum. Optio totam, sapiente ",
                  "diaryTitle": "Title 1",
                  "entry_id": 1,
                },
              }
            }
            editEntryAction={[MockFunction]}
            getEntryAction={
              [MockFunction] {
                "calls": Array [
                  Array [
                    "1",
                  ],
                  Array [
                    "1",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": Promise {},
                  },
                  Object {
                    "isThrow": false,
                    "value": Promise {},
                  },
                ],
              }
            }
            history={
              Object {
                "push": [Function],
              }
            }
            location={
              Object {
                "pathname": "/addEntry",
              }
            }
            match={
              Object {
                "params": Object {
                  "entry_id": "1",
                },
              }
            }
            newEntry={Object {}}
            onCancel={[Function]}
            onChange={[MockFunction]}
            onSubmit={[MockFunction]}
            title="Form title"
          />
        </div>,
        <Footer />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <EntryForm
            Edit={false}
            addEntryAction={[MockFunction]}
            date="20-2-19"
            diaryBody="Test Diary body"
            diaryTitle="Test Diary Title"
            editEntry={
              Object {
                "entry": Object {
                  "date": "12/12/2018",
                  "delete": [MockFunction],
                  "diaryEntryBody": "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Perspiciatis commodi, hic esse necessitatibus inventore illo debitis error nesciunt officia earum. Optio totam, sapiente ",
                  "diaryTitle": "Title 1",
                  "entry_id": 1,
                },
              }
            }
            editEntryAction={[MockFunction]}
            getEntryAction={
              [MockFunction] {
                "calls": Array [
                  Array [
                    "1",
                  ],
                  Array [
                    "1",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": Promise {},
                  },
                  Object {
                    "isThrow": false,
                    "value": Promise {},
                  },
                ],
              }
            }
            history={
              Object {
                "push": [Function],
              }
            }
            location={
              Object {
                "pathname": "/addEntry",
              }
            }
            match={
              Object {
                "params": Object {
                  "entry_id": "1",
                },
              }
            }
            newEntry={Object {}}
            onCancel={[Function]}
            onChange={[MockFunction]}
            onSubmit={[MockFunction]}
            title="Form title"
          />,
          "className": "CreateEntryForm",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "Edit": false,
            "addEntryAction": [MockFunction],
            "date": "20-2-19",
            "diaryBody": "Test Diary body",
            "diaryTitle": "Test Diary Title",
            "editEntry": Object {
              "entry": Object {
                "date": "12/12/2018",
                "delete": [MockFunction],
                "diaryEntryBody": "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Perspiciatis commodi, hic esse necessitatibus inventore illo debitis error nesciunt officia earum. Optio totam, sapiente ",
                "diaryTitle": "Title 1",
                "entry_id": 1,
              },
            },
            "editEntryAction": [MockFunction],
            "getEntryAction": [MockFunction] {
              "calls": Array [
                Array [
                  "1",
                ],
                Array [
                  "1",
                ],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": Promise {},
                },
                Object {
                  "isThrow": false,
                  "value": Promise {},
                },
              ],
            },
            "history": Object {
              "push": [Function],
            },
            "location": Object {
              "pathname": "/addEntry",
            },
            "match": Object {
              "params": Object {
                "entry_id": "1",
              },
            },
            "newEntry": Object {},
            "onCancel": [Function],
            "onChange": [MockFunction],
            "onSubmit": [MockFunction],
            "title": "Form title",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Header />,
          <div
            className="CreateEntryForm"
          >
            <EntryForm
              Edit={false}
              addEntryAction={[MockFunction]}
              date="20-2-19"
              diaryBody="Test Diary body"
              diaryTitle="Test Diary Title"
              editEntry={
                Object {
                  "entry": Object {
                    "date": "12/12/2018",
                    "delete": [MockFunction],
                    "diaryEntryBody": "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Perspiciatis commodi, hic esse necessitatibus inventore illo debitis error nesciunt officia earum. Optio totam, sapiente ",
                    "diaryTitle": "Title 1",
                    "entry_id": 1,
                  },
                }
              }
              editEntryAction={[MockFunction]}
              getEntryAction={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      "1",
                    ],
                    Array [
                      "1",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                }
              }
              history={
                Object {
                  "push": [Function],
                }
              }
              location={
                Object {
                  "pathname": "/addEntry",
                }
              }
              match={
                Object {
                  "params": Object {
                    "entry_id": "1",
                  },
                }
              }
              newEntry={Object {}}
              onCancel={[Function]}
              onChange={[MockFunction]}
              onSubmit={[MockFunction]}
              title="Form title"
            />
          </div>,
          <Footer />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <EntryForm
              Edit={false}
              addEntryAction={[MockFunction]}
              date="20-2-19"
              diaryBody="Test Diary body"
              diaryTitle="Test Diary Title"
              editEntry={
                Object {
                  "entry": Object {
                    "date": "12/12/2018",
                    "delete": [MockFunction],
                    "diaryEntryBody": "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Perspiciatis commodi, hic esse necessitatibus inventore illo debitis error nesciunt officia earum. Optio totam, sapiente ",
                    "diaryTitle": "Title 1",
                    "entry_id": 1,
                  },
                }
              }
              editEntryAction={[MockFunction]}
              getEntryAction={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      "1",
                    ],
                    Array [
                      "1",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                    Object {
                      "isThrow": false,
                      "value": Promise {},
                    },
                  ],
                }
              }
              history={
                Object {
                  "push": [Function],
                }
              }
              location={
                Object {
                  "pathname": "/addEntry",
                }
              }
              match={
                Object {
                  "params": Object {
                    "entry_id": "1",
                  },
                }
              }
              newEntry={Object {}}
              onCancel={[Function]}
              onChange={[MockFunction]}
              onSubmit={[MockFunction]}
              title="Form title"
            />,
            "className": "CreateEntryForm",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "Edit": false,
              "addEntryAction": [MockFunction],
              "date": "20-2-19",
              "diaryBody": "Test Diary body",
              "diaryTitle": "Test Diary Title",
              "editEntry": Object {
                "entry": Object {
                  "date": "12/12/2018",
                  "delete": [MockFunction],
                  "diaryEntryBody": "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Perspiciatis commodi, hic esse necessitatibus inventore illo debitis error nesciunt officia earum. Optio totam, sapiente ",
                  "diaryTitle": "Title 1",
                  "entry_id": 1,
                },
              },
              "editEntryAction": [MockFunction],
              "getEntryAction": [MockFunction] {
                "calls": Array [
                  Array [
                    "1",
                  ],
                  Array [
                    "1",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": Promise {},
                  },
                  Object {
                    "isThrow": false,
                    "value": Promise {},
                  },
                ],
              },
              "history": Object {
                "push": [Function],
              },
              "location": Object {
                "pathname": "/addEntry",
              },
              "match": Object {
                "params": Object {
                  "entry_id": "1",
                },
              },
              "newEntry": Object {},
              "onCancel": [Function],
              "onChange": [MockFunction],
              "onSubmit": [MockFunction],
              "title": "Form title",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
